package main

import (
	"bytes"
	"fmt"
	"net/http"
	"os"
	"regexp"
	"strings"
	"text/template"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
)

type serviceDesc struct {
	ServiceType string // Greeter
	ServiceName string // example.Greeter
	Metadata    string // example/v1/greeter.proto
	Methods     []*methodDesc
	MethodSets  map[string]*methodDesc
}

func (s *serviceDesc) execute(tpl string) string {
	s.MethodSets = make(map[string]*methodDesc)
	for _, m := range s.Methods {
		s.MethodSets[m.Name] = m
	}
	buf := new(bytes.Buffer)
	tmpl, err := template.New("http").Parse(strings.TrimSpace(tpl))
	if err != nil {
		panic(err)
	}
	if err := tmpl.Execute(buf, s); err != nil {
		panic(err)
	}
	return strings.Trim(buf.String(), "\r\n")
}

type methodDesc struct {
	// 方法名称
	Name string
	// 原始名称
	OriginalName string
	// 绑定的第几条方法
	Num int
	// 请求体名称
	Request string
	// 响应体名称
	Reply string
	// 路由路径
	Path string
	// 请求方法
	Method string
	// 是否存在path参数
	HasVars bool
	// 参数名称 和 数据类型
	Vars map[string]*string
	// 是否存在Body字段
	HasBody bool
	// Body字段值
	Body string
	// 选择器的其他HTTP绑定。嵌套绑定本身不能包含“additional_bindings”字段（即嵌套只能有一层深度）。
	ResponseBody string
}

var methodSets = make(map[string]int)

// generateRouterFile generates a _http.pb.go.
func generateRouterFile(gen *protogen.Plugin, file *protogen.File, omitempty bool, frame string) *protogen.GeneratedFile {
	if len(file.Services) == 0 || (omitempty && !hasHTTPRule(file.Services)) {
		return nil
	}
	fileRouter := file.GeneratedFilenamePrefix + "_http.pb.go"
	g := gen.NewGeneratedFile(fileRouter, file.GoImportPath)
	g.P("// Code generated by protoc-gen-http. DO NOT EDIT.")
	g.P("// versions:")
	g.P(fmt.Sprintf("// - protoc-gen-http %s", version))
	g.P("// - protoc  ", protocVersion(gen))
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g, omitempty, frame)
	return g
}

// generateFileContent generates the errors definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, omitempty bool, frame string) {
	if len(file.Services) == 0 {
		return
	}
	var tpl string
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "context"})
	g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "net/http"})
	switch frame {
	case "gin":
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "errors"})
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "github.com/gin-gonic/gin"})
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "github.com/gin-gonic/gin/binding"})
		tpl = ginTemplate
	case "echo":
		// g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "net/url"})
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "strings"})
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "io"})
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "github.com/labstack/echo/v4"})
		g.QualifiedGoIdent(protogen.GoIdent{GoImportPath: "github.com/go-kratos/kratos/v2/encoding"})
		var encodingForm = protogen.GoImportPath("github.com/go-kratos/kratos/v2/encoding/form")
		var encodingJson = protogen.GoImportPath("github.com/go-kratos/kratos/v2/encoding/json")
		var encodingXml = protogen.GoImportPath("github.com/go-kratos/kratos/v2/encoding/xml")
		g.P("var (")
		g.P("_ = ", encodingForm.Ident("Name"))
		g.P("_ = ", encodingJson.Ident("Name"))
		g.P("_ = ", encodingXml.Ident("Name"))
		g.P(")")
		tpl = echoTemplate
	default:
		fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: this %s http frame is not supported\n", frame)
	}

	g.P()
	for _, message := range file.Messages {
		var _ = message
		// g.P("func (x *", message.Desc.Name(), ") ParamBind(c v4.Context, fieldName string) {")
		// for _, field := range message.Fields {
		// 	kind := field.Desc.Kind()
		// 	if field.Message != nil {

		// 	} else if field.Oneof != nil {

		// 	} else if field.Enum != nil {

		// 	} else if field.Desc.IsMap() {

		// 	} else if field.Desc.IsList() {

		// 	} else {
		// 		g.P("x.", field.Desc.Name())
		// 		switch kind {
		// 		case protoreflect.BoolKind:
		// 			return "bool"
		// 		// case protoreflect.EnumKind:
		// 		// 	return "enum"
		// 		case protoreflect.Int32Kind:
		// 			return "int32"
		// 		case protoreflect.Sint32Kind:
		// 			return "sint32"
		// 		case protoreflect.Uint32Kind:
		// 			return "uint32"
		// 		case protoreflect.Int64Kind:
		// 			return "int64"
		// 		case protoreflect.Sint64Kind:
		// 			return "sint64"
		// 		case protoreflect.Uint64Kind:
		// 			return "uint64"
		// 		case protoreflect.Sfixed32Kind:
		// 			return "sfixed32"
		// 		case protoreflect.Fixed32Kind:
		// 			return "fixed32"
		// 		case protoreflect.FloatKind:
		// 			return "float"
		// 		case protoreflect.Sfixed64Kind:
		// 			return "sfixed64"
		// 		case protoreflect.Fixed64Kind:
		// 			return "fixed64"
		// 		case protoreflect.DoubleKind:
		// 			return "double"
		// 		case protoreflect.StringKind:
		// 			return "string"
		// 		case protoreflect.BytesKind:
		// 			return "bytes"
		// 		// case protoreflect.MessageKind:
		// 		// 	return "message"
		// 		// case protoreflect.GroupKind:
		// 		// 	return "group"
		// 		default:
		// 			return fmt.Sprintf("<unknown:%d>", k)
		// 		}
		// 	}
		// }
		// g.P("}")
	}
	for _, service := range file.Services {
		genService(gen, file, g, service, omitempty, tpl)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, omitempty bool, tpl string) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P("// Deprecated: Do not use.")
	}
	// HTTP Server.
	sd := &serviceDesc{
		ServiceType: service.GoName,
		ServiceName: string(service.Desc.FullName()),
		Metadata:    file.Desc.Path(),
	}

	var host = ""
	// host := proto.GetExtension(service.Desc.Options(), annotations.E_DefaultHost).(string)
	// oas := proto.GetExtension(service.Desc.Options(), annotations.E_OauthScopes).(string)

	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
		if rule != nil && ok {
			for _, bind := range rule.AdditionalBindings {
				sd.Methods = append(sd.Methods, buildHTTPRule(g, method, bind, host))
			}
			sd.Methods = append(sd.Methods, buildHTTPRule(g, method, rule, host))
		} else if !omitempty {
			path := fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())
			sd.Methods = append(sd.Methods, buildMethodDesc(g, method, http.MethodPost, path, host))
		}
	}
	if len(sd.Methods) != 0 {
		g.P(sd.execute(tpl))
	}
}

func buildHTTPRule(g *protogen.GeneratedFile, m *protogen.Method, rule *annotations.HttpRule, host string) *methodDesc {
	var (
		path         string
		method       string
		body         string
		responseBody string
	)

	switch pattern := rule.Pattern.(type) {
	case *annotations.HttpRule_Get:
		path = pattern.Get
		method = http.MethodGet
	case *annotations.HttpRule_Put:
		path = pattern.Put
		method = http.MethodPut
	case *annotations.HttpRule_Post:
		path = pattern.Post
		method = http.MethodPost
	case *annotations.HttpRule_Delete:
		path = pattern.Delete
		method = http.MethodDelete
	case *annotations.HttpRule_Patch:
		path = pattern.Patch
		method = http.MethodPatch
	case *annotations.HttpRule_Custom:
		path = pattern.Custom.Path
		method = pattern.Custom.Kind
	}
	body = rule.Body
	responseBody = rule.ResponseBody
	md := buildMethodDesc(g, m, method, path, host)
	if method == http.MethodGet || method == http.MethodDelete {
		if body != "" {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s body should not be declared.\n", method, path)
		}
	} else {
		if body == "" {
			_, _ = fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: %s %s does not declare a body.\n", method, path)
		}
	}
	if body == "*" {
		md.HasBody = true
		md.Body = ""
	} else if body != "" {
		md.HasBody = true
		md.Body = "." + camelCaseVars(body)
	} else {
		md.HasBody = false
	}
	if responseBody == "*" {
		md.ResponseBody = ""
	} else if responseBody != "" {
		md.ResponseBody = "." + camelCaseVars(responseBody)
	}

	return md
}

func buildMethodDesc(g *protogen.GeneratedFile, m *protogen.Method, method, path string, host string) *methodDesc {
	defer func() { methodSets[m.GoName]++ }()

	vars := buildPathVars(path)

	for v, s := range vars {
		fields := m.Input.Desc.Fields()

		if s != nil {
			path = replacePath(v, *s, path)
		}
		for _, field := range strings.Split(v, ".") {
			if strings.TrimSpace(field) == "" {
				continue
			}
			if strings.Contains(field, ":") {
				field = strings.Split(field, ":")[0]
			}
			fd := fields.ByName(protoreflect.Name(field))
			if fd == nil {
				fmt.Fprintf(os.Stderr, "\u001B[31mERROR\u001B[m: The corresponding field '%s' declaration in message could not be found in '%s'\n", v, path)
				os.Exit(2)
			}
			if fd.IsMap() {
				fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a map.\n", v)
			} else if fd.IsList() {
				fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a list.\n", v)
			} else if fd.Kind() == protoreflect.MessageKind || fd.Kind() == protoreflect.GroupKind {
				//fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: The field in path:'%s' shouldn't be a message or group follow ent.\n", v)
				fields = fd.Message().Fields()
			}
		}
	}

	for v, _ := range vars {
		path = replacePath(v, "", path)
	}

	return &methodDesc{
		Name:         m.GoName,
		OriginalName: string(m.Desc.Name()),
		Num:          methodSets[m.GoName],
		Request:      g.QualifiedGoIdent(m.Input.GoIdent),
		Reply:        g.QualifiedGoIdent(m.Output.GoIdent),
		Path:         path,
		Method:       method,
		HasVars:      len(vars) > 0,
		Vars:         vars,
	}
}

func replacePath(name string, value string, path string) string {
	pattern := regexp.MustCompile(fmt.Sprintf(`(?i){([\s]*%s[\s]*)=?([^{}]*)}`, name))
	idx := pattern.FindStringIndex(path)
	if len(idx) > 0 {
		path = fmt.Sprintf("%s:%s%s",
			path[:idx[0]], // The start of the match
			name,
			path[idx[1]:],
		)
	}
	return path
}

func camelCaseVars(s string) string {
	subs := strings.Split(s, ".")
	vars := make([]string, 0, len(subs))
	for _, sub := range subs {
		vars = append(vars, camelCase(sub))
	}
	return strings.Join(vars, ".")
}

// camelCase returns the CamelCased name.
// If there is an interior underscore followed by a lower case letter,
// drop the underscore and convert the letter to upper case.
// There is a remote possibility of this rewrite causing a name collision,
// but it's so remote we're prepared to pretend it's nonexistent - since the
// C++ generator lowercases names, it's extremely unlikely to have two fields
// with different capitalizations.
// In short, _my_field_name_2 becomes XMyFieldName_2.
func camelCase(s string) string {
	if s == "" {
		return ""
	}
	t := make([]byte, 0, 32)
	i := 0
	if s[0] == '_' {
		// Need a capital letter; drop the '_'.
		t = append(t, 'X')
		i++
	}
	// Invariant: if the next letter is lower case, it must be converted
	// to upper case.
	// That is, we process a word at a time, where words are marked by _ or
	// upper case letter. Digits are treated as words.
	for ; i < len(s); i++ {
		c := s[i]
		if c == '_' && i+1 < len(s) && isASCIILower(s[i+1]) {
			continue // Skip the underscore in s.
		}
		if isASCIIDigit(c) {
			t = append(t, c)
			continue
		}
		// Assume we have a letter now - if not, it's a bogus identifier.
		// The next word is a sequence of characters that must start upper case.
		if isASCIILower(c) {
			c ^= ' ' // Make it a capital letter.
		}
		t = append(t, c) // Guaranteed not lower case.
		// Accept lower case sequence that follows.
		for i+1 < len(s) && isASCIILower(s[i+1]) {
			i++
			t = append(t, s[i])
		}
	}
	return string(t)
}

// Is c an ASCII lower-case letter?
func isASCIILower(c byte) bool {
	return 'a' <= c && c <= 'z'
}

// Is c an ASCII digit?
func isASCIIDigit(c byte) bool {
	return '0' <= c && c <= '9'
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

// hasHTTPRule 是否存在http路由
func hasHTTPRule(services []*protogen.Service) bool {
	for _, service := range services {
		for _, method := range service.Methods {
			if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
				continue
			}
			rule, ok := proto.GetExtension(method.Desc.Options(), annotations.E_Http).(*annotations.HttpRule)
			if rule != nil && ok {
				return true
			}
		}
	}
	return false
}

func buildPathVars(path string) (res map[string]*string) {
	if strings.HasSuffix(path, "/") {
		fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: Path %s should not end with \"/\" \n", path)
	}
	res = make(map[string]*string)

	{
		var (
			isStartVarCheck = false
			varStartStr     = ""
			varName         = ""
		)
		for _, r := range path {
			s := string(r)
			// 如果是 / 则开启变量转换
			if isStartVarCheck {
				// 变量开启字符串为空
				if varStartStr == "" {
					switch s {
					case "*", ":", "{":
						varStartStr = s
						varName = ""
					default:
						isStartVarCheck = false
					}
					continue
				}
				var isVarEnd = false
				if s == "}" {
					if varStartStr != "{" {
						varName += s
						continue
					}
					isVarEnd = true
				} else if s == "/" {
					isVarEnd = true
				}
				if isVarEnd {
					varStartStr = ""
					v := camelCase(varName)
					res[varName] = &v
					continue
				}
				// 变量第一条数据必须是英文字符
				if varName == "" {
					// varName += varName
					// continue
					// if (s >= "a" && s <= "z") || (s >= "A" && s <= "Z") {
					// 	varName += varName
					// 	continue
					// }
					// fmt.Fprintf(os.Stderr, "\u001B[31mWARN\u001B[m: Path %s should not end with \"a-zA-Z\" \n", path)
				}
				varName += s
				continue
			}
			if s == "/" {
				isStartVarCheck = true
				varStartStr = ""
			}
		}
		if isStartVarCheck && varName != "" {
			isStartVarCheck = false
			v := camelCase(varName)
			res[varName] = &v
		}
	}

	// pattern := regexp.MustCompile(`(?i){([a-z\.0-9_\s]*)=?([^{}]*)}`)
	// matches := pattern.FindAllStringSubmatch(path, -1)
	// for _, m := range matches {
	// 	name := strings.TrimSpace(m[1])
	// 	if len(name) > 1 && len(m[2]) > 0 {
	// 		res[name] = &m[2]
	// 	} else {
	// 		res[name] = nil
	// 	}
	// }
	return
}

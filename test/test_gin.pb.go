// Code generated by protoc-plugin-http. DO NOT EDIT.
// versions:
// - protoc-plugin-http v0.1.1
// - protoc  v3.19.4
// source: test/test.proto

package test

import (
	context "context"
	errors "errors"
	gin "github.com/gin-gonic/gin"
	binding "github.com/gin-gonic/gin/binding"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
)

var (
	BindGinTagName = "json"
	// GinResponseBodyKey represents the response content key
	GinResponseBodyKey = "_gin-gonic/gin/responsebodykey"
	// GinBindRequestBody binds the body parameter
	GinBindRequestBody = _ginBindRequestBody
)

func SetGinBindRequestBody(f func(*gin.Context, any) error) {
	GinBindRequestBody = f
}

// _ginBindRequestBody default bind handler
func _ginBindRequestBody(c *gin.Context, req any) error {
	return c.Bind(req)
}

func ginValidate(obj any) error {
	if binding.Validator == nil {
		return nil
	}
	return binding.Validator.ValidateStruct(obj)
}

func _Bind_Gin_Params(c *gin.Context, req proto.Message) error {
	m := make(map[string][]string)
	for _, v := range c.Params {
		m[v.Key] = []string{v.Value}
	}
	return binding.MapFormWithTag(req, m, BindGinTagName)
}

func _Abort_Bind_Gin_Params(c *gin.Context, req proto.Message) error {
	if err := _Bind_Gin_Params(c, req); err != nil {
		return c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
	}
	return nil
}

func _Bind_Gin_Query(c *gin.Context, req proto.Message) error {
	query := c.Request.URL.Query()
	for _, v := range c.Params {
		if query.Get(v.Key) == "" {
			query.Set(v.Key, v.Value)
		}
	}
	return binding.MapFormWithTag(req, query, BindGinTagName)
}

func _Abort_Bind_Gin_Query(c *gin.Context, req proto.Message) error {
	if err := _Bind_Gin_Query(c, req); err != nil {
		return c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
	}
	return nil
}

// TestGinServer is the server API for Test service.
// All implementations must embed UnimplementedTestGinServer
// for forward compatibility
type TestGinServer interface {
	List(ctx context.Context, req *ListTestRequest) (*ListTestReply, error)
	Get(ctx context.Context, req *GetTestRequest) (*GetTestReply, error)
	Create(ctx context.Context, req *CreateTestRequest) (*CreateTestReply, error)
	Update(ctx context.Context, req *UpdateTestRequest) (*UpdateTestReply, error)
	Delete(ctx context.Context, req *DeleteTestRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestGinServer must be embedded to have forward compatible implementations.
type UnimplementedTestGinServer struct{}

func (UnimplementedTestGinServer) List(ctx context.Context, req *ListTestRequest) (*ListTestReply, error) {
	return nil, gin.Error{Type: gin.ErrorTypePublic, Err: errors.New(http.StatusText(http.StatusNotImplemented))}
}
func (UnimplementedTestGinServer) Get(ctx context.Context, req *GetTestRequest) (*GetTestReply, error) {
	return nil, gin.Error{Type: gin.ErrorTypePublic, Err: errors.New(http.StatusText(http.StatusNotImplemented))}
}
func (UnimplementedTestGinServer) Create(ctx context.Context, req *CreateTestRequest) (*CreateTestReply, error) {
	return nil, gin.Error{Type: gin.ErrorTypePublic, Err: errors.New(http.StatusText(http.StatusNotImplemented))}
}
func (UnimplementedTestGinServer) Update(ctx context.Context, req *UpdateTestRequest) (*UpdateTestReply, error) {
	return nil, gin.Error{Type: gin.ErrorTypePublic, Err: errors.New(http.StatusText(http.StatusNotImplemented))}
}
func (UnimplementedTestGinServer) Delete(ctx context.Context, req *DeleteTestRequest) (*emptypb.Empty, error) {
	return nil, gin.Error{Type: gin.ErrorTypePublic, Err: errors.New(http.StatusText(http.StatusNotImplemented))}
}
func (UnimplementedTestGinServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestGinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestGinServer will
// result in compilation errors.
type UnsafeTestGinServer interface {
	mustEmbedUnimplementedTestServer()
}

type TestGinRouter = gin.IRoutes

func RegisterTestGinServer(r TestGinRouter, srv TestGinServer) {
	r.GET("/account/:id/:c_asa_2c_3/:kk/*aa", _Test_List0_Gin_Handler(srv))
	r.POST("/as/a/::id", _Test_List1_Gin_Handler(srv))
	r.GET("/account/:id", _Test_Get0_Gin_Handler(srv))
	r.POST("/account", _Test_Create0_Gin_Handler(srv))
	r.PUT("/account/:id", _Test_Update0_Gin_Handler(srv))
	r.DELETE("/account", _Test_Delete0_Gin_Handler(srv))
}

func _Test_List0_Gin_Handler(srv TestGinServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		req := new(ListTestRequest)
		if err := _Abort_Bind_Gin_Params(c, req); err != nil {
			return
		}
		if err := _Abort_Bind_Gin_Query(c, req); err != nil {
			return
		}
		if err := ginValidate(req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		res, err := srv.List(c, req)
		if err != nil {
			c.AbortWithError(http.StatusInternalServerError, err).SetType(gin.ErrorTypeAny) //nolint: errcheck
			return
		}
		c.Set(GinResponseBodyKey, res)
	}
}

func _Test_List1_Gin_Handler(srv TestGinServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		req := new(ListTestRequest)
		if err := _Abort_Bind_Gin_Params(c, req); err != nil {
			return
		}
		if err := GinBindRequestBody(c, req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		if err := ginValidate(req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		res, err := srv.List(c, req)
		if err != nil {
			c.AbortWithError(http.StatusInternalServerError, err).SetType(gin.ErrorTypeAny) //nolint: errcheck
			return
		}
		c.Set(GinResponseBodyKey, res)
	}
}

func _Test_Get0_Gin_Handler(srv TestGinServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		req := new(GetTestRequest)
		if err := _Abort_Bind_Gin_Query(c, req); err != nil {
			return
		}
		if err := ginValidate(req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		res, err := srv.Get(c, req)
		if err != nil {
			c.AbortWithError(http.StatusInternalServerError, err).SetType(gin.ErrorTypeAny) //nolint: errcheck
			return
		}
		c.Set(GinResponseBodyKey, res)
	}
}

func _Test_Create0_Gin_Handler(srv TestGinServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		req := new(CreateTestRequest)
		if err := GinBindRequestBody(c, req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		if err := ginValidate(req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		res, err := srv.Create(c, req)
		if err != nil {
			c.AbortWithError(http.StatusInternalServerError, err).SetType(gin.ErrorTypeAny) //nolint: errcheck
			return
		}
		c.Set(GinResponseBodyKey, res)
	}
}

func _Test_Update0_Gin_Handler(srv TestGinServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		req := new(UpdateTestRequest)
		if err := GinBindRequestBody(c, req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		if err := ginValidate(req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		res, err := srv.Update(c, req)
		if err != nil {
			c.AbortWithError(http.StatusInternalServerError, err).SetType(gin.ErrorTypeAny) //nolint: errcheck
			return
		}
		c.Set(GinResponseBodyKey, res)
	}
}

func _Test_Delete0_Gin_Handler(srv TestGinServer) gin.HandlerFunc {
	return func(c *gin.Context) {
		req := new(DeleteTestRequest)
		if err := _Abort_Bind_Gin_Query(c, req); err != nil {
			return
		}
		if err := ginValidate(req); err != nil {
			c.AbortWithError(http.StatusBadRequest, err).SetType(gin.ErrorTypeBind) //nolint: errcheck
			return
		}
		res, err := srv.Delete(c, req)
		if err != nil {
			c.AbortWithError(http.StatusInternalServerError, err).SetType(gin.ErrorTypeAny) //nolint: errcheck
			return
		}
		c.Set(GinResponseBodyKey, res)
	}
}
